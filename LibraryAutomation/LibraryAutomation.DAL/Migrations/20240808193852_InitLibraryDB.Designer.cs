// <auto-generated />
using System;
using LibraryAutomation.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAutomation.DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240808193852_InitLibraryDB")]
    partial class InitLibraryDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryAutomation.Domain.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressID");

                    b.HasIndex("MemberID");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            AddressID = 1,
                            City = "New York",
                            Country = "USA",
                            District = "Manhattan",
                            MemberID = 1,
                            Neighborhood = "Chelsea",
                            PostalCode = "10001"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.AddressEmployee", b =>
                {
                    b.Property<int>("AddressEmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressEmployeeID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressEmployeeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AddressesEmployee", (string)null);

                    b.HasData(
                        new
                        {
                            AddressEmployeeID = 1,
                            City = "Main City",
                            Country = "Main Country",
                            District = "Main District",
                            EmployeeID = 1,
                            Neighborhood = "Main Neighborhood",
                            PostalCode = "555-555"
                        },
                        new
                        {
                            AddressEmployeeID = 2,
                            City = "Second City",
                            Country = "Second Country",
                            District = "Second District",
                            EmployeeID = 2,
                            Neighborhood = "Second Neighborhood",
                            PostalCode = "666-666"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            AuthorID = 2,
                            Name = "J.R.R. Tolkien"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsHere")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublicationYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BookID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BranchID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            AuthorID = 1,
                            ISBN = "123456789",
                            IsHere = false,
                            PublicationYear = new DateTime(1951, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherID = 1,
                            Title = "Foundation"
                        },
                        new
                        {
                            BookID = 2,
                            AuthorID = 2,
                            ISBN = "987654321",
                            IsHere = true,
                            PublicationYear = new DateTime(1937, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherID = 2,
                            Title = "The Hobbit"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.BookCategory", b =>
                {
                    b.Property<int>("BookCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookCategoryID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("BookCategoryID");

                    b.HasIndex("BookID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookCategoryID = 1,
                            BookID = 1,
                            CategoryID = 1
                        },
                        new
                        {
                            BookCategoryID = 2,
                            BookID = 2,
                            CategoryID = 2
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.BookGenre", b =>
                {
                    b.Property<int>("BookGenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookGenreID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.HasKey("BookGenreID");

                    b.HasIndex("BookID");

                    b.HasIndex("GenreID");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookGenreID = 1,
                            BookID = 1,
                            GenreID = 1
                        },
                        new
                        {
                            BookGenreID = 2,
                            BookID = 2,
                            GenreID = 2
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<int>("LibraryID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchID");

                    b.HasIndex("LibraryID");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            BranchID = 1,
                            LibraryID = 1,
                            Location = "Main City",
                            Name = "Main Branch"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Non-Fiction"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("AddressEmployee")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("BranchID");

                    b.HasIndex("GenderID");

                    b.HasIndex("RoleID");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            AddressEmployee = "456 Elm St",
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchID = 1,
                            Email = "janesmith@example.com",
                            EmployeePhoneNumber = "987654321",
                            GenderID = 1,
                            IdentityNumber = "22222222222",
                            LastName = "Smith",
                            MaritalStatus = 1,
                            Name = "Jane",
                            RoleID = 1
                        },
                        new
                        {
                            EmployeeID = 2,
                            AddressEmployee = "123 Main St",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchID = 1,
                            Email = "john.doe@example.com",
                            EmployeePhoneNumber = "555-555-555",
                            GenderID = 1,
                            IdentityNumber = "33333333333",
                            LastName = "Doe",
                            MaritalStatus = 1,
                            Name = "John",
                            RoleID = 3
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenderID");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            Name = "Erkek"
                        },
                        new
                        {
                            GenderID = 2,
                            Name = "Kadın"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            GenreID = 2,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Library", b =>
                {
                    b.Property<int>("LibraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryID"));

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LibraryID");

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            LibraryID = 1,
                            LibraryName = "Main Library"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Loan", b =>
                {
                    b.Property<int>("LoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LoanID");

                    b.HasIndex("BookID");

                    b.HasIndex("MemberID");

                    b.HasIndex("PenaltyID");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            LoanID = 1,
                            BookID = 1,
                            LoanDate = new DateTime(2024, 8, 8, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8231),
                            MemberID = 1,
                            PenaltyID = 1,
                            ReturnDate = new DateTime(2024, 8, 22, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8244)
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MemberPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("MemberID");

                    b.HasIndex("BranchID");

                    b.HasIndex("GenderID");

                    b.HasIndex("RoleID");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberID = 1,
                            Address = "123 Main St",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchID = 1,
                            Email = "Tomdoe@example.com",
                            GenderID = 1,
                            IdentityNumber = "11111111111",
                            LastName = "Doe",
                            MemberPhoneNumber = "123456789",
                            Name = "Tom",
                            RoleID = 2
                        },
                        new
                        {
                            MemberID = 2,
                            Address = "123 Main St",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchID = 1,
                            Email = "Tomdoe@example.com",
                            GenderID = 2,
                            IdentityNumber = "11111111111",
                            LastName = "Doe",
                            MemberPhoneNumber = "123456789",
                            Name = "Samantha",
                            RoleID = 2
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationID = 1,
                            Message = "Your book is overdue",
                            NotificationDate = new DateTime(2024, 8, 8, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8313),
                            UserID = 1
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Penalty", b =>
                {
                    b.Property<int>("PenaltyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PenaltyID"));

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PenaltyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PenaltyDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PenaltyLevel")
                        .HasColumnType("int");

                    b.Property<float>("PenaltyScore")
                        .HasColumnType("real");

                    b.HasKey("PenaltyID");

                    b.HasIndex("MemberID");

                    b.ToTable("Penalties");

                    b.HasData(
                        new
                        {
                            PenaltyID = 1,
                            MemberID = 1,
                            PenaltyDate = new DateTime(2024, 8, 8, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8294),
                            PenaltyDescription = "Late return",
                            PenaltyLevel = 1,
                            PenaltyScore = 10f
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 1,
                            Address = "New York",
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            PublisherID = 2,
                            Address = "New York",
                            Name = "HarperCollins"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.PublisherAddress", b =>
                {
                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PublisherAddressID")
                        .HasColumnType("int");

                    b.HasKey("PublisherID");

                    b.ToTable("PublisherAddress", (string)null);

                    b.HasData(
                        new
                        {
                            PublisherID = 1,
                            City = "DefaultCity",
                            Country = "DefaultCountry",
                            PostalCode = "12345",
                            PublisherAddressID = 1
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryID")
                        .HasColumnType("int");

                    b.Property<int>("ReportTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportID");

                    b.HasIndex("LibraryID");

                    b.HasIndex("ReportTypeID");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportID = 1,
                            CreationDate = new DateTime(2024, 8, 8, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8363),
                            LibraryID = 1,
                            ReportTypeID = 1,
                            Type = "Monthly"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.ReportType", b =>
                {
                    b.Property<int?>("ReportTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ReportTypeID"));

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportTypeID");

                    b.ToTable("ReportTypes");

                    b.HasData(
                        new
                        {
                            ReportTypeID = 1,
                            ReportName = "Monthly Report"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationID = 1,
                            BookID = 1,
                            ReservationDate = new DateTime(2024, 8, 8, 22, 38, 51, 910, DateTimeKind.Local).AddTicks(8330),
                            UserID = 1
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "Member"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("BranchID");

                    b.HasIndex("EmployeeID")
                        .IsUnique()
                        .HasFilter("[EmployeeID] IS NOT NULL");

                    b.HasIndex("MemberID")
                        .IsUnique()
                        .HasFilter("[MemberID] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            BranchID = 1,
                            EmployeeID = 1,
                            Password = "Admin",
                            RoleID = 1,
                            UserName = "Admin"
                        },
                        new
                        {
                            UserID = 3,
                            BranchID = 1,
                            MemberID = 1,
                            Password = "user123",
                            RoleID = 2,
                            UserName = "user"
                        },
                        new
                        {
                            UserID = 2,
                            BranchID = 1,
                            EmployeeID = 2,
                            Password = "emplo123",
                            RoleID = 3,
                            UserName = "emplo"
                        },
                        new
                        {
                            UserID = 4,
                            BranchID = 1,
                            MemberID = 2,
                            Password = "user2123",
                            RoleID = 3,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Address", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Member", "Member")
                        .WithMany("Addresses")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.AddressEmployee", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Employee", "Employee")
                        .WithMany("AddressesEmp")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Book", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Branch", null)
                        .WithMany("Books")
                        .HasForeignKey("BranchID");

                    b.HasOne("LibraryAutomation.Domain.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.BookCategory", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.BookGenre", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Branch", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Library", "Library")
                        .WithMany("Branches")
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Employee", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Loan", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Penalty", "Penalty")
                        .WithMany("Loans")
                        .HasForeignKey("PenaltyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Book");

                    b.Navigation("Member");

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Member", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Branch", "Branch")
                        .WithMany("Members")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Gender", "Gender")
                        .WithMany("Members")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Notification", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Penalty", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Member", "Member")
                        .WithMany("Penalties")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.PublisherAddress", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Publisher", "Publisher")
                        .WithMany("AddressList")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Report", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Library", "Library")
                        .WithMany("Reports")
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Reservation", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.User", b =>
                {
                    b.HasOne("LibraryAutomation.Domain.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Domain.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("LibraryAutomation.Domain.User", "EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryAutomation.Domain.Member", "Member")
                        .WithOne("User")
                        .HasForeignKey("LibraryAutomation.Domain.User", "MemberID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryAutomation.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Book", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("BookGenres");

                    b.Navigation("Loans");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Branch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Employees");

                    b.Navigation("Members");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Employee", b =>
                {
                    b.Navigation("AddressesEmp");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Library", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Member", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Loans");

                    b.Navigation("Penalties");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Penalty", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Publisher", b =>
                {
                    b.Navigation("AddressList");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.ReportType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.Role", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Members");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryAutomation.Domain.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
